import Head from "next/head";
import styles from "../styles/Home.module.css";
import Card from "../components/Card";
import Button from "../components/Button";
import Input from "../components/Input";
import Alert from "../components/Alert";
import { WarningCircle } from "phosphor-react";
import { SubmitHandler, useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import * as yup from "yup";
import { useState } from "react";
import Label from "../components/Label";
import { useRouter } from "next/router";
import { useMediaQuery } from 'react-responsive'
import {  signInWithEmailAndPassword   } from 'firebase/auth';
import { auth } from "../firebaseConfig";

type FormValues = {
  email: string;
  password: string;
};

const schema = yup
  .object({
    email: yup.string().email("Must be a valid email").lowercase().required(),
    password: yup.string().min(6).required(),
  })
  .required();

export default function Signin() {
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const {
    register,
    handleSubmit,
    formState: { isValid },
  } = useForm<yup.InferType<typeof schema>>({
    resolver: yupResolver(schema),
    mode: "onChange",
  });
  const router = useRouter();
  const onSubmit: SubmitHandler<FormValues> = (data) => {
    setLoading(true);
    signInWithEmailAndPassword(auth, data.email, data.password)
    .then(async(res) => {
      setLoading(false);
      console.log(res);
      await router.replace("/id");
    })
    .catch((err) => {
      console.log(err);
      setError("Your email and/or password are incorrect.");
    });
  };

  const isDesktopOrLaptop = useMediaQuery({
    query: '(min-width: 1000px)'
  })
  const isTabletOrMobile = useMediaQuery({ query: '(max-width: 800px)' })

  return (
    <>
      <Head>
        <title>TPC - Login</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Card className={`h-9/12 roundedXl flex flex-col justify-center items-center bg-white ${ isDesktopOrLaptop ? "w-6/12" : isTabletOrMobile ? "w-full" : "w-6/12"}`}>
          <h1 className="text-black text-xl font-bold mt-4">TPC</h1>
          <span className="h-0.5 mt-2 w-full bg-gray-900"></span>
          <div className="px-3">
            <div className="container mx-auto max-w-md">
              <div className="my-6">
                <div className={error ? "block" : "hidden"}>
                  <Alert variant="error">
                    <div className="flex flex-row">
                      <div className="flex-shrink-0 text-error">
                        <WarningCircle
                          size={24}
                          weight="bold"
                          color="currentColor"
                        />
                      </div>
                      <div className="text-white ml-3">{error}</div>
                    </div>
                  </Alert>
                </div>
              </div>
              <form method="post" onSubmit={handleSubmit(onSubmit)}>
                <div className="mt-9">
                  <Label htmlFor="email">Email</Label>
                  <Input
                    id="email"
                    autoComplete="email"
                    {...register("email")}
                  />
                </div>
                <div className="mt-4 mb-2">
                  <div className="flex flex-row justify-between">
                    <Label htmlFor="password">Password</Label>
                    <a
                      className="text-sm text-primary cursor-pointer"
                      onClick={() => setShowPassword(!showPassword)}
                    >
                      {showPassword ? "Hide" : "Show"}
                    </a>
                  </div>
                  <Input
                    id="password"
                    type={showPassword ? "text" : "password"}
                    autoComplete="current-password"
                    {...register("password")}
                  />
                </div>
                <span className="text-sm text-gray-900 ">
                  Please fill the forms to proceed with login
                </span>
                <div className="mt-6">
                  <Button
                    type="submit"
                    variant="primary"
                    className="w-full pt-2 mt-2 mb-2 text-md text-white bg-gray-900 hover:bg-gray-800 disabled:bg-gray-400 disabled:pointer-events-none px-4 py-2"
                    disabled={!isValid}
                    loading={loading}
                  >
                    Log In
                  </Button>
                </div>
                <div className="mt-2">
                  <Button
                    type="button"
                    variant="primary"
                    className="w-full pt-2 mb-2 text-md text-gray-900 hover:text-gray-500 bg-transparent px-4 py-2"
                    onClick={() => router.push('/register')}
                  >
                    Register
                  </Button>
                </div>
              </form>
            </div>
          </div>
        </Card>
      </main>
    </>
  );
}
